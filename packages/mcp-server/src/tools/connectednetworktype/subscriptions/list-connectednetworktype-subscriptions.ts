// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'camara-mcp/filtering';
import { Metadata, asTextContentResult } from 'camara-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Camara from 'camara-sdk';

export const metadata: Metadata = {
  resource: 'connectednetworktype.subscriptions',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/connectednetworktype/subscriptions',
  operationId: 'ConnectedNetworkType_retrieveConnectedNetworkTypeSubscriptionList',
};

export const tool: Tool = {
  name: 'list_connectednetworktype_subscriptions',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nRetrieve a list of device connected network type event subscription(s)\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/subscription_list_response',\n  $defs: {\n    subscription_list_response: {\n      type: 'array',\n      items: {\n        $ref: '#/$defs/connected_network_type_subscription'\n      }\n    },\n    connected_network_type_subscription: {\n      type: 'object',\n      description: 'Represents a event-type subscription.',\n      properties: {\n        id: {\n          type: 'string',\n          description: 'The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as subscriptionId as per Commonalities Event Notification Model.'\n        },\n        config: {\n          $ref: '#/$defs/connected_network_type_config'\n        },\n        protocol: {\n          $ref: '#/$defs/connected_network_type_protocol'\n        },\n        sink: {\n          type: 'string',\n          description: 'The address to which events shall be delivered using the selected protocol.'\n        },\n        types: {\n          type: 'array',\n          description: 'Camara Event types eligible to be delivered by this subscription.\\nNote: For the current Commonalities API design guidelines, only one event type per subscription is allowed\\n',\n          items: {\n            $ref: '#/$defs/connected_network_type_subscription_event_type'\n          }\n        },\n        expiresAt: {\n          type: 'string',\n          description: 'Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has specific policy about that.\\nIt must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.\\nRecommended format is yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)\\n',\n          format: 'date-time'\n        },\n        startsAt: {\n          type: 'string',\n          description: 'Date when the event subscription will begin/began\\nIt must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.\\nRecommended format is yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)\\n',\n          format: 'date-time'\n        },\n        status: {\n          type: 'string',\n          description: 'Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept).',\n          enum: [            'ACTIVATION_REQUESTED',\n            'ACTIVE',\n            'EXPIRED',\n            'INACTIVE',\n            'DELETED'\n          ]\n        }\n      },\n      required: [        'id',\n        'config',\n        'protocol',\n        'sink',\n        'types'\n      ]\n    },\n    connected_network_type_config: {\n      type: 'object',\n      description: 'Implementation-specific configuration parameters needed by the subscription manager for acquiring events.\\nIn CAMARA we have predefined attributes like `subscriptionExpireTime`, `subscriptionMaxEvents`, `initialEvent`\\nSpecific event type attributes must be defined in `subscriptionDetail`\\nNote: if a request is performed for several event type, all subscribed event will use same `config` parameters.\\n',\n      properties: {\n        subscriptionDetail: {\n          type: 'object',\n          description: 'The detail of the requested event subscription.',\n          properties: {\n            device: {\n              type: 'object',\n              description: 'End-user equipment able to connect to a mobile network. Examples of devices include smartphones or IoT sensors/actuators.\\n\\nThe developer can choose to provide the below specified device identifiers:\\n\\n* `ipv4Address`\\n* `ipv6Address`\\n* `phoneNumber`\\n* `networkAccessIdentifier`\\n\\nNOTE: the MNO might support only a subset of these options. The API invoker can provide multiple identifiers to be compatible across different MNOs. In this case the identifiers MUST belong to the same device.\\n',\n              properties: {\n                ipv4Address: {\n                  type: 'object',\n                  description: 'The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).\\n\\nIf the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.\\n\\nIf NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)\\n\\nIn all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.\\n',\n                  properties: {\n                    privateAddress: {\n                      type: 'string',\n                      description: 'A single IPv4 address with no subnet mask'\n                    },\n                    publicAddress: {\n                      type: 'string',\n                      description: 'A single IPv4 address with no subnet mask'\n                    },\n                    publicPort: {\n                      type: 'integer',\n                      description: 'TCP or UDP port number'\n                    }\n                  }\n                },\n                ipv6Address: {\n                  type: 'string',\n                  description: 'The device should be identified by the observed IPv6 address, or by any single IPv6 address from within the subnet allocated to the device (e.g. adding ::0 to the /64 prefix).\\n'\n                },\n                networkAccessIdentifier: {\n                  type: 'string',\n                  description: 'A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.'\n                },\n                phoneNumber: {\n                  type: 'string',\n                  description: 'A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with \\'+\\'.'\n                }\n              }\n            }\n          }\n        },\n        initialEvent: {\n          type: 'boolean',\n          description: 'Set to `true` by API consumer if consumer wants to get an event as soon as the subscription is created and current situation reflects event request.\\nExample: Consumer request area entered event. If consumer sets initialEvent to true and device is already in the geofence, an event is triggered\\n'\n        },\n        subscriptionExpireTime: {\n          type: 'string',\n          description: 'The subscription expiration time (in date-time format) requested by the API consumer.',\n          format: 'date-time'\n        },\n        subscriptionMaxEvents: {\n          type: 'integer',\n          description: 'Identifies the maximum number of event reports to be generated (>=1) requested by the API consumer - Once this number is reached, the subscription ends.'\n        }\n      },\n      required: [        'subscriptionDetail'\n      ]\n    },\n    connected_network_type_protocol: {\n      type: 'string',\n      description: 'Identifier of a delivery protocol. Only HTTP is allowed for now',\n      enum: [        'HTTP',\n        'MQTT3',\n        'MQTT5',\n        'AMQP',\n        'NATS',\n        'KAFKA'\n      ]\n    },\n    connected_network_type_subscription_event_type: {\n      type: 'string',\n      description: 'network-type-changed - Event triggered when the connected network type of the device changes.',\n      enum: [        'org.camaraproject.connected-network-type-subscriptions.v0.network-type-changed'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      'x-correlator': {
        type: 'string',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: [],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Camara, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  return asTextContentResult(
    await maybeFilter(jq_filter, await client.connectednetworktype.subscriptions.list(body)),
  );
};

export default { metadata, tool, handler };
